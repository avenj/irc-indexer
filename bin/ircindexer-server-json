#!perl
use 5.12.1;
use strict;
use warnings;

## FIXME sighup handler
##  stop and clear all existing trawlers in $obj
##  clear and reload network cfg in $cfg
##  re-init trawlers

use Compress::Zlib qw/memGzip memGunzip/;
use JSON::XS;

## Core:
use Digest::SHA  qw/sha1_hex/;
use File::Path   qw/make_path remove_tree/;
use Scalar::Util qw/blessed/;
use Storable     qw/dclone/;
use POSIX ();

## POE + HTTP
use POE;
use URI;
use POEx::HTTP::Server;

## Indexer:
use IRC::Indexer;

use IRC::Indexer::Conf;
use IRC::Indexer::Logger;

use IRC::Indexer::Trawl::Bot;
use IRC::Indexer::Info::Network;

use IRC::Indexer::Output::JSON;

#use Devel::Size qw/total_size/;

my $opts = {
  help => sub {
    print(
      "ircindexer-server-json\n\n",
      
      "  -v, --version\n",
      "       Display IRC::Indexer version\n\n",
      
      "  -c, --config=PATH\n",
      "       Configuration file for this server.\n\n",
      
      "  -l, --loglevel=LEVEL\n",
      "      Log verbosity, one of: debug, info, warn\n",
      "      Overrides configuration file.\n\n",
      
      "  -d, --detach\n",
      "       Run as a daemon process.\n\n",
      
      "  -i, --interval=SECS\n",
      "       Interval between trawling servers on a specific network.\n",
      "       Defaults to 600 seconds (10 minutes)\n",
    );
    exit 0
  },
  
  version => sub {
    print(
      "ircindexer-server-json (IRC::Indexer $IRC::Indexer::VERSION)\n",
      "  POEx::HTTP::Server $POEx::HTTP::Server::VERSION\n",
    );
    exit 0
  },
  
  detach => 0,

  interval => 600,
};

use Getopt::Long;
GetOptions( $opts,
  qw/
    help 
    version
    
    config=s
    
    detach!

    interval=i
    
    loglevel=s
    
    showsource
  /,
);

## These are set up here for ease of reference:

my $obj = {
  Log    => undef,
  Cfg    => undef,
};

my $state = { 
  active_trawlers => {},
  timers => { trawlers => {} },
  stats  => {
    Version => $IRC::Indexer::VERSION,
    StartedAt => time,
    
    LoopTick      => 0,
    
    TotalNetworks => 0,
    TotalServers  => 0,
    
    TrawlersExecuted => 0,
    TrawlersCreated  => 0,
    
    LastTrawl         => 0,
    LastTrawledServer => undef,
    
    HTTP_Responses   => 0,
  },
};

my $cfg = { 
  Networks => {},
  BindAddr   => '0.0.0.0',
  ServerPort => 8700,
  CacheDir   => undef,
  ListChans  => undef,
  
  LogFile  => undef,
  LogLevel => undef,
  LogHTTP  => 1,
  LogIRC   => 1,
};

## for managing trawler creation
## keyed on network name
## value is array of arrays containing:
##  [ 'network', 'server', $trawler_opts_hashref ]
my $ArrayConf = { };

## If we're missing CacheDir:
my $jsmemcache = { };

sub get_cfg {
  ## set up $cfg and logging
  
  ## FIXME catch sighup and call get_cfg again?
  
  die "No --config specified.\n" unless $opts->{config};
  
  die "Specified conf nonexistant: $opts->{config}"
    unless -e $opts->{config};

  die "Specified conf not readable: $opts->{config}"
    unless -r $opts->{config};

  ## Try to set up primary conf: 
  my $cfpath = $opts->{config};
  my $conf = IRC::Indexer::Conf->new;
  $obj->{Cfg} = $conf;
  my $cfhash;
  
  {
    local $@;
    eval { $cfhash = $conf->parse_conf($cfpath) };
    die "Could not parse conf: $@" if $@;
  }
  
  unless ($cfhash->{NetworkDir}) {
    die "Configuration directive missing: NetworkDir\n"
  }
    
  for my $thisopt (keys %$cfg) {
    $cfg->{$thisopt} = $cfhash->{$thisopt};
  }

  ## Set up logging:
  my $loglevel = $opts->{loglevel} || $cfg->{LogLevel} || 'info' ;
    
  if ($cfg->{LogFile}) {
    my $handler = IRC::Indexer::Logger->new(
      LogFile  => $cfg->{LogFile},
      LogLevel => $loglevel,
    );
    $obj->{Log} = $handler->logger;
  }
  
  if ($opts->{detach}) {
    open 'STDERR', '>', $cfg->{LogFile}
      if $cfg->{LogFile};
  } else {
    ## not detached, log to STDOUT
    unless (blessed $obj->{Log}) {
      my $handler = IRC::Indexer::Logger->new(
        DevNull => 1,
      );
      $obj->{Log} = $handler->logger;
    }
    $obj->{Log}->add(
      screen => {
          log_to   => "STDOUT",
          maxlevel => $loglevel || 'info',
          timeformat     => "%Y/%m/%d %H:%M:%S",
          message_layout => "[%T] %L %m",
      },
    );
  }
  
  $cfg->{ServerPort} //= 8700;
  
  cachedir_clean() if $cfg->{CacheDir};

  ## Read server specifications:  
  my $nethash = $conf->parse_nets($cfhash->{NetworkDir});
  $cfg->{Networks} = $nethash;
}


sub log_to {
  ## log_to('http', 'warn', ...)
  ## log_to('irc', 'info', ...)
  ## null-op if there's no logger present
  my ($type, $level, @lines) = @_;
  return unless @lines;
  my $log = $obj->{Log};
  return unless blessed $log;
  
  given (lc $type) {
  
    when ("http") {
      return unless $cfg->{LogHTTP};
      $log->$level("$type ", @lines);
    }
    
    when ("irc") {
      return unless $cfg->{LogIRC};
      $log->$level("$type ", @lines);
    }
    
    default {
      ## anything else goes right to the log:
      $log->$level("$type ", @lines);
    }
  
  }
}

sub poco_cfg_httpd {
  
  $state->{htevents} = [ map { 'h_'.$_ } qw/
     error_404
     src
     stats
     list
     server 
     servlist
     network
     netlist
  / ];
  push(@{$state->{htevents}}, 'post_request');


  POEx::HTTP::Server->spawn(
    inet => {
      LocalAddr => $cfg->{BindAddr},
      LocalPort => $cfg->{ServerPort},
    },
    
    handlers => [
      '^/$'       => 'poe:indexerhttp/h_stats',
      '^/stats'   => 'poe:indexerhttp/h_stats',
       
      '^/list'    => 'poe:indexerhttp/h_list',
       
      '^/network' => 'poe:indexerhttp/h_network',
      '^/netlist' => 'poe:indexerhttp/h_netlist',
      
      '^/src'     => 'poe:indexerhttp/h_src',
      
      '' => 'poe:indexerhttp/h_error_404',
      
      'post_request' => 'poe:indexerhttp/post_request',
    ],
  );
  
  log_to('http', 'info', 'HTTP configured');
  
  return 1
}

sub poco_init_session {
  ## create 'indexerhttp' session
  POE::Session->create(
    package_states => [
      main => [ qw/
        _start
        _stop

        _init_nets

        _timer_chk
        _trawler_run
        _trawler_process
        
        _cache_json
        
        _sig_int
      / ],
    ],
  );

  log_to('session', 'debug', 'Session initialized');
}

sub _start {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  $kernel->alias_set('indexerhttp');
  
  $kernel->sig('INT', '_sig_int');
  $kernel->sig('TERM', '_sig_int');

  log_to('session', 'info', 'Session started');

  ## init httpd
  my @htstates = poco_cfg_httpd();
  
  $kernel->call( $_[SESSION], '_init_nets' );
  
  ## add states from $state->{htevents}
  $kernel->state($_, __PACKAGE__) for @{$state->{htevents}};  
}

sub _init_nets {
  my ($kernel, $heap) = @_[KERNEL, HEAP];

  ## called by either _start or _rehash
  
  ## clear configured trawlers in $ArrayConf
  $ArrayConf = { };

  my($total_nets, $total_servers);
  NETWORK: for my $network (keys %{ $cfg->{Networks} }) {
    ++$total_nets;
    my $this_net = $cfg->{Networks}->{$network};
    SERVER: for my $server (keys %$this_net) {
      ++$total_servers;
      my $this_cf = $this_net->{$server};
      
      log_to('irc', 'info', "Init trawler: $network -> $server");

      ## push configuration to array
      ## create_trawler in _trawler_run     
      my %trawlopts = %$this_cf;
      push(@{$ArrayConf->{$network}}, 
        [ $network, $server, { Server => $server, %trawlopts } ]
      );
      
      log_to('irc', 'debug', "Trawler configured for $server");
    } ## SERVER
          
    ## add to chk pool
    ## FIXME: move HasRun
    $state->{timers}->{trawlers}->{$network} = {
      HasRun => 0,
    };

  } ## NETWORK
  
  $kernel->alarm('_timer_chk' => time + 3);

  log_to('irc', 'info',
    "Trawling $total_servers servers across $total_nets networks"
  );

  $state->{stats}->{TotalNetworks} = $total_nets;
  $state->{stats}->{TotalServers}  = $total_servers;  
}

sub _sig_int {
  $_[KERNEL]->yield('_stop');
}

sub _stop {
  log_to('session', 'warn', "_stop received");
  $_[KERNEL]->signal( $_[KERNEL], 'shutdown' );
  cachedir_clean() if $cfg->{CacheDir};
}

sub _timer_chk {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my $pool = $state->{timers};

  ++$state->{stats}->{LoopTick};
  
  my @trawlers;

  ## FIXME
  ##  move/rename $pool bits, HasRun should live somewhere else
  NETWORK: for my $network (keys %$ArrayConf) {
    my $this_net = $pool->{trawlers}->{$network};
    
    my $last_trawled = $this_net->{HasRun};
    my $sp = 1;
    unless ($last_trawled) {
      ## No trawlers have been run for this network, yet.
      ## Spin one up, set HasRun time.
      $this_net->{HasRun} = time();
      
      unless (@{ $ArrayConf->{$network} }) {
        log_to('irc', 'debug', "No trawlers to check for $network");
        next NETWORK     
      }

      log_to('irc', 'info', "Scheduling initial trawler for $network");
      $kernel->alarm_add( '_trawler_run', time + ($sp+=0.5),
        $ArrayConf->{$network}->[0] 
      );
    }

    unless (@{ $state->{active_trawlers}->{$network}//[] }) {
      log_to('irc', 'debug', "No active trawlers for $network");
    }
    
    my @pending;
    my $idx = 0;
    TRAWL: for my $trawler (@{ $state->{active_trawlers}->{$network} }) {
      if ($trawler->done) {
        ## Have a finished trawler.
        
        ## Drop this trawler from active_trawlers:
        splice @{ $state->{active_trawlers}->{$network} }, $idx, 1;

        ## Splice this trawler's cf out of this network's ArrayConf:
        splice @{ $ArrayConf->{$network} }, $idx, 1;
        
        ## It'll be pushed back later by _trawler_process:
        $kernel->yield( '_trawler_process', $network, $trawler );

        ## Schedule the next one for this net to run in ten minutes,
        ## if we have one.
        ## If we don't have one, _trawler_process should create and 
        ## schedule this one again.
        my $next_trawler = $ArrayConf->{$network}->[0];
        if (defined $next_trawler) {
          my $next_run_at  = time + ($opts->{interval} || 600);
          $kernel->alarm_add(
            '_trawler_run', $next_run_at, $next_trawler
          );
          log_to('irc', 'debug', 
            "Scheduling next trawler for $network"
          );
        }
      } else {
        ## Trawler still pending or running.
        my $servername = $trawler->trawler_for;
        push(@pending, $servername);
      }
      ++$idx;
    } ## TRAWL

    log_to('irc', 'debug',
      "Trawlers pending for $network: ". join ', ', @pending
    );

  } ## NETWORK

  $kernel->alarm('_timer_chk' => time + 3);  
}

sub _trawler_run {
  ## takes an arrayref:
  ##  [ network, server, conf-as-hashref ]
  my ($kernel, $heap, $confitem) = @_[KERNEL, HEAP, ARG0];
  
  my ($network, $server, $trawlcf) = @$confitem;

  log_to('irc', 'debug', 
    "Constructring new trawler: $network: $server"
  );
  
  my $trawler = create_trawler(%$trawlcf);
  $trawler->run();
  
  ## Add to active trawlers for this network
  push(@{ $state->{active_trawlers}->{$network} }, $trawler );

  log_to('irc', 'debug', "Trawler run issued for $server");

  ++$state->{stats}->{TrawlersExecuted};
  $state->{stats}->{LastTrawl} = time;
  $state->{stats}->{LastTrawledServer} = $server;
}

sub _trawler_process {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($network, $trawler) = @_[ARG0, ARG1];

  ## passed trawler objects marked as done (from _chk)

  unless (blessed $trawler) {
    log_to('irc', 'warn', 
      "Cannot _trawler_process unblessed trawler for $network"
    );
  }
  
  my $server = $trawler->info->servername;
  my $orig_server = $trawler->trawler_for;

  if (my $err = $trawler->failed) {
    log_to('irc', 'warn',
      "Trawler reports failure: $network ($orig_server): $err"
    );
    return
  }

  log_to('irc', 'info', 
    "Completed trawler: $network ($server)"
  );
  
  my $info = $trawler->info;
  
  ## sort ListChans:
  $info->channels if $cfg->{ListChans};

  ## feed to JSONify
  my $s_info = $info->clone;
  my $s_js = IRC::Indexer::Output::JSON->new(
    Input => $s_info,
  );

  ## NetInfo objects can get very large ...
  ## we serialize/compress them in-mem and revive them here:
  my $netinfo_obj;
  if ($obj->{NetInfo}->{$network}) {
    my $zipped = $obj->{NetInfo}->{$network};
    my $this_netinfo_hash = decode_json( memGunzip($zipped) );
    $netinfo_obj = IRC::Indexer::Info::Network->new(
      FromHash => $this_netinfo_hash,
    );
  } else {
    $netinfo_obj = IRC::Indexer::Info::Network->new();
  }
  
  ## feed it this server's Info object:
  $netinfo_obj->add_server($info);

  ## process and grab new hash:
  my $n_info = $netinfo_obj->netinfo;
  undef $netinfo_obj;
  $obj->{NetInfo}->{$network} = memGzip( encode_json($n_info) );

  my $n_js = IRC::Indexer::Output::JSON->new(
    Input => $n_info,
  );

  my $server_name  = $info->servername;
  $kernel->yield( '_cache_json',
    $network, $server_name, $s_js, $n_js
  );
  
  ## Replace this finished trawler
  my $this_trawler_cf = $cfg->{Networks}->{$network}->{$orig_server};
  unless (defined $this_trawler_cf) {
    ## May have disappeared in a rehash.
    log_to('irc', 'warn', 
      "Not readding trawler: no conf: $network: $server"
    );
    return
  }
  
  my %trawlopts = %$this_trawler_cf;
  my $replaced_cf = [ $network, $orig_server,
    {
      Server => $orig_server,
      %trawlopts
    },
  ];

  push(@{$ArrayConf->{$network}}, $replaced_cf);

  log_to('irc', 'info', "Rescheduled trawler: $network: $orig_server");
  
  ## If this is the only cfg'd trawler, we can reschedule it now:
  unless (@{ $ArrayConf->{$network} } > 1) {
    my $next_run_at  = time + ($opts->{interval} || 600);
    $kernel->alarm_add(
      '_trawler_run', $next_run_at, $replaced_cf
    );
    log_to('irc', 'debug', "Scheduling single trawler for $network");
  }
}

sub _cache_json {
  ## eventy frontend to cache_json()
  my $kernel = $_[KERNEL];
  my ($network, $server, $s_js, $n_js) = @_[ARG0 .. $#_];  
  my $s_hash = $s_js->dump;
  my $n_hash = $n_js->dump;
  cache_json( $s_hash, $network, $server );
  cache_json( $n_hash, $network );
  log_to('irc', 'info',
    "Cached JSON: $network ($server)"
  );
}


## Helpers

sub create_trawler {
  my %trawlopts = @_;
  my $this_cf = \%trawlopts;
  my $trawler = IRC::Indexer::Trawl::Bot->new(
    Server => $this_cf->{Server},
    Port   => $this_cf->{Port},
    Nickname => $this_cf->{Nickname},
    Timeout  => $this_cf->{Timeout},
    Interval => $this_cf->{Interval},
    BindAddr => $this_cf->{BindAddr},
    UseIPV6  => $this_cf->{UseIPV6},
  );
  
  ++$state->{stats}->{TrawlersCreated};
  
  return $trawler
}

sub cachedir_clean {
  my $cachedir = $cfg->{CacheDir};
  return unless $cachedir;

  if (-e $cachedir) {
    die "CacheDir exists but not writable"
      unless -w $cachedir;
    log_to('session', 'warn', "Cleaning up CacheDir");
    remove_tree($cachedir) if -e $cachedir;
  }
  make_path($cachedir);
  return 1
}

sub cachedir_write {
  my ($data, $network, $server) = @_;
  return unless $network;

  my $cachedir;
  die "cachedir_write called but no CacheDir configured"
    unless $cachedir = $cfg->{CacheDir};

  if ($server) {
    ## write compressed server file:
    ## $cachedir/$network/$HASH
    my $hexified = sha1_hex($server);
    my $dir_path = join '/', $cachedir, $network;
    make_path($dir_path) unless -e $dir_path;
    my $path = join '/', $dir_path, $hexified;
    open my $fh, '>', $path
      or die "cachedir_write; open failed: $path: $!";
    print $fh memGzip($data);
    close $fh;
  } else {
    ## write compressed network file:
    ## $cachedir/$network.z
    my $path = join '/', $cachedir, $network .'.z' ;
    open my $fh, '>', $path
      or die "cachedir_write; open failed: $path: $!";
    binmode $fh;
    print $fh memGzip($data);
    close $fh;
  }
  return 1 
}

sub cachedir_read {
  my ($network, $server) = @_;
  return unless $network;
  
  my $cachedir;
  die "cachedir_read called but no CacheDir configured"
    unless $cachedir = $cfg->{CacheDir};
  
  my $data;
  if ($server) {
    ## try to find/read $cachedir/$network/$HASH
    my $hexified = sha1_hex($server);
    my $path = join '/', $cachedir, $network, $hexified;
    return unless -r $path;
    ## not fatal ... you just get nothing:
    open my $fh, '<', $path or return;
    binmode $fh;
    { local $/; $data = memGunzip(<$fh>) }
    close $fh;
  } else {
    ## try to find/read $cachedir/$network.z
    my $path = join '/', $cachedir, $network .'.z' ;
    return unless -r $path;
    open my $fh, '<', $path or return;
    binmode $fh;
    { local $/; $data = memGunzip(<$fh>) }
    close $fh;
  }
  
  return $data
}

## FIXME

sub cache_json {
  my ($data, $network, $server) = @_;

  if ($server) {
    ## store a server's json
    if ($cfg->{CacheDir}) {
      cachedir_write($data, $network, $server);
    } else {
      $jsmemcache->{Servers}->{$network}->{$server} = $data;
    }
  } else {
    ## store a network's json
    if ($cfg->{CacheDir}) {
      cachedir_write($data, $network);
    } else {
      $jsmemcache->{Networks}->{$network} = $data;
    }
  }
}

sub restore_json {
  my ($network, $server) = @_;

  if ($server) {

    if ($cfg->{CacheDir}) {
      return cachedir_read($network, $server)
    } else {
      return unless exists $jsmemcache->{Servers}->{$network};
      return $jsmemcache->{Servers}->{$network}->{$server}
    }
  } else {
    if ($cfg->{CacheDir}) {
      return cachedir_read($network)
    } else {
      return $jsmemcache->{Networks}->{$network}
    }
  }  
}

## HTTP states

sub h_error_404 {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp, $reason) = @_[ARG0, ARG1, ARG2];
    
  my $uri  = URI->new( $req->uri );
  my $path = $uri->path;
  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  
  log_to('http', 'info', "$addr 404 $path");
  
  $reason = "Undefined action: ".$req->uri unless $reason;
  $resp->error(404, $reason);
}

sub h_src {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];
  
  unless ($opts->{showsource}) {
    $kernel->yield( h_error_404 => $req, $resp );
    return
  }

  my $src;
  seek(DATA, 0, 0);
  {
    local $/; $src = <DATA>;
  }

  $resp->content_type('text/plain');
  $resp->content($src);
  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_src");
  
  $resp->done;
}

sub h_stats {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];

  my $uri = URI->new($req->uri);
  my @chunks = $uri->path_segments;
  splice @chunks, 0, 2;

  my ($method) = @chunks;
  $method = 'json' unless $method;
  
  if ($method eq 'text' || $method eq 'plain') {
    my $n_count = $state->{stats}->{TotalNetworks};
    my $s_count = $state->{stats}->{TotalServers};
    $resp->content_type('text/plain');
    $resp->content(
        "Trawling $s_count servers across $n_count networks\n\n"
      . "Version: $IRC::Indexer::VERSION\n\n"
    );
  } else {
    $resp->content_type('application/json');
    my $ref = $state->{stats};
    my $json = JSON::XS->new->utf8(1)->pretty->encode($ref);
    $resp->content($json);
  }

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_stats");
  
  $resp->done;
}

sub h_server {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp)       = @_[ARG0, ARG1];
  my ($network, $server) = @_[ARG2, ARG3];
  ## handed off by h_network

  my $json;
  unless ( $json = restore_json($network, $server) ) {
    ## no JSON for this server, 404
    my $reason;
    
    if (defined $cfg->{Networks}->{$network}
        && defined $cfg->{Networks}->{$network}->{$server}
    ) {
      ## configured but not trawled (yet)
      $reason = "$server ($network) configured but no data";
    } else {
      $reason = "No such server";
    }

    $kernel->yield( h_error_404 => $req, $resp, $reason );
    return
  }
  
  $resp->content_type('application/json');
  $resp->content($json);

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_server $network $server");
  
  $resp->done;
}

sub h_servlist {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp, $network) = @_[ARG0, ARG1, ARG2];
  ## handed off by h_network

  my $servlist = [];
  
  if ($cfg->{CacheDir}) {
    my $netjson = cachedir_read($network);
  
    if ($netjson) {
      my $net_hash = decode_json($netjson);
      my $s_hash   = $net_hash->{Servers} // {};
      $servlist = [ keys %$s_hash ];
    }
  } else {
    $servlist = [ keys %{ $jsmemcache->{Servers}->{$network}//{} } ];
  }

  ## we have JSON::XS available ...
  ## eh, use Output::JSON to get pretty-print opts anyway:
  my $jsify = IRC::Indexer::Output::JSON->new(
    Input => $servlist,
  );
  my $json = $jsify->dump;
  
  $resp->content_type('application/json');
  $resp->content($json);
  
  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_servlist $network");
  
  $resp->done;
}

sub h_netlist {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];

  ## Return JSONified array of pullable networks:

  my $netlist = [ keys %$ArrayConf ];

  my $jsify = IRC::Indexer::Output::JSON->new(
    Input => $netlist,
  );
  my $json = $jsify->dump;
  
  $resp->content_type('application/json');
  $resp->content($json);

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_netlist");

  $resp->done;
}

sub h_list {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];

  ## Return all configured networks/servers

  my $jsify = IRC::Indexer::Output::JSON->new(
    Input => $cfg->{Networks},
  );
  my $json = $jsify->dump;
  
  $resp->content_type('application/json');
  $resp->content($json);
  
  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_list");
  
  $resp->done;
}

sub h_network {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];
  ## handler for /network/...

  my $uri = URI->new($req->uri);
  my @chunks = $uri->path_segments;
  splice @chunks, 0, 2;

  my ($network) = @chunks;
  unless ($network) {
    ## supply JSONified network list:
    $kernel->yield( h_netlist => $req, $resp );
    return
  }

  my $json;
  ## We don't know this network:
  unless ( $json = restore_json($network) ) {
    my $reason;
    if (defined $cfg->{Networks}->{$network}) {
      ## configured but not trawled
      $reason = "$network pending trawler run";
    } else {
      $reason = "No such network";
    }
    $kernel->yield( h_error_404 => $req, $resp, $reason );
    return
  }

  ## if this is a /network/<net>/server, hand it off:
  if ($chunks[1] && $chunks[1] eq "server") {
    my $server = $chunks[2];
    unless ($server) {
      ## supply available server list:
      $kernel->yield( h_servlist => $req, $resp, $network );
      return
    }
    $kernel->yield( h_server => $req, $resp, $network, $server );
    return
  }    

  ## otherwise, try to serve a net hash:
  
  $resp->content_type('application/json');
  $resp->content($json);

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_network $network");
  $resp->done;
}

sub post_request {
  ++$state->{stats}->{HTTP_Responses};
}


sub start_indexer {
  if ($opts->{detach}) {
    print "Starting detached indexer.\n";
    
    my $fork = fork;
    exit 1 if not defined $fork;
    exit 0 if $fork;
    POSIX::setsid();
    $fork = fork;
    exit 1 if not defined $fork;
    exit 0 if $fork;
    open(STDIN, '<', '/dev/null');
    open(STDOUT, '>', '/dev/null');
    open(STDERR, '>', '/dev/null');
    umask(022);
  }

  get_cfg();
  poco_init_session();
  POE::Kernel->run;
}

start_indexer();

__END__

=pod

=head1 NAME

ircindexer-server-json - Serve IRC::Indexer JSON over HTTP

=head1 SYNOPSIS

  ## Create example httpd.cf:
  $ ircindexer-examplecf -t httpd -o httpd.cf
  $ $EDITOR httpd.cf

  ## Add some servers:
  $ mkdir -p networks/cobaltirc
  $ ircindexer-examplecf -t spec -o \
      networks/cobaltirc/phoenix.xyloid.org
  $ $EDITOR networks/cobaltirc/phoenix.xyloid.org

  ## Start server:
  $ ircindexer-server-json -c httpd.cf

=head1 DESCRIPTION

Indexes sets of servers in parallel via L<IRC::Indexer>, exporting 
information as JSON via HTTP for ease of retrieval.

Uses L<POEx::HTTP::Server> to provide HTTP daemon functionality.

Intended to serve as the back-end to a presentation system for the 
data collected. See <IRC::Indexer::POD::ExampleClients> for some examples 
of ways to make use of the exported data on the client side.

=head2 Fetching JSON

Networks or servers that are configured but not yet trawled will report 
a 404 error with a string indicating that the trawl run is pending.

=head3 List

A hash containing networks and servers scheduled for trawling is 
available via B</list>:

  ## JSON hash containing network -> server mapping of
  ## configured trawlers:
  http://my.server:8700/list

Note that this is the list of configured network -> server maps, not 
necessarily the list of B<trawled> servers.

That is to say, the network names are guaranteed valid, but the server 
names may not be available under the /network/<NET>/server/ tree; for a 
list of servers available for retrieval, see L</Servers>, below.

=head3 Networks

Network information hashes are exported via B</network/> routes:

  ## JSON Network Info hash for 'CobaltIRC':
  http://my.server:8700/network/CobaltIRC

  ## JSON array of available trawled networks:
  http://my.server:8700/network

These are indexed by their configured network name.

=head3 Servers

Specific server hashes as described in L<IRC::Indexer::Trawl::Bot> are 
exported via /network/<NETNAME>/server/<SERVERNAME>:

  ## List of trawled servers for this network:
  http://my.server:8700/network/CobaltIRC/server

  ## Trawl results from a single server:
  http://my.server:8700/network/CobaltIRC/server/eris.oppresses.us

Note that servers are not available for retrieval until they are 
trawled; depending on trawl intervals, it may take some time to cycle 
through all listed servers for a network.

Also note that servers are indexed by their reported server name -- not 
necessarily the name specified in their configuration.

=head3 Stats

Stats regarding the running instance are exported via B</stats>:

  http://my.server:8700/stats

=head1 AUTHOR

Jon Portnoy <avenj@cobaltirc.org>

L<http://www.cobaltirc.org>

=cut
