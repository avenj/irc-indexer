#!perl
use 5.12.1;
use strict;
use warnings;

use POE;

use IRC::Indexer;

use IRC::Indexer::Conf;
use IRC::Indexer::Logger;

use IRC::Indexer::Trawl::Bot;

use IRC::Indexer::Info::Network;

use IRC::Indexer::Output::JSON;

use URI;

use POEx::HTTP::Server;

use Scalar::Util qw/blessed/;
use Storable qw/dclone/;

use JSON::XS;

my $opts = {
  help => sub {
    print(
      "ircindexer-server-json\n\n",
      
      "  -c, --config=PATH\n",
      "       Configuration file for this server.\n\n",
      
    );
    exit 0
  },
  
  version => sub {
  
  },
  
  
};
use Getopt::Long;
GetOptions( $opts,
  qw/
    help 
    version
    
    config=s
    
    loglevel=s
    
    showsource
    
  /,
);

my $json = { };

my $obj = {
  Log    => undef,
  Cfg    => undef,
  
  ##  network -> server -> $obj
  Trawlers => {},
  ## Info::Network objects per-network:
  NetInfo => {},
};

my $state = { 
  timers => { trawlers => {} },
  stats  => {
    StartedAt => time,
    
    TotalNetworks => 0,
    TotalServers  => 0,
  },
};

my $cfg = { 
  Networks => {},
  ServerPort => 8700,
  
  LogFile  => undef,
  LogLevel => undef,
  LogHTTP  => 1,
  LogIRC   => 1,
};

sub get_cfg {
  ## set up $cfg and logging
  
  ## FIXME catch sighup and call get_cfg again?
  
  die "No --config specified.\n" unless $opts->{config};
  
  die "Specified conf nonexistant: $opts->{config}"
    unless -e $opts->{config};

  die "Specified conf not readable: $opts->{config}"
    unless -r $opts->{config};
  
  my $cfpath = $opts->{config};
  my $conf = IRC::Indexer::Conf->new;
  $obj->{Cfg} = $conf;
  my $cfhash;
  
  {
    local $@;
    eval { $cfhash = $conf->parse_conf($cfpath) };
    die "Could not parse conf: $@" if $@;
  }
  
  unless ($cfhash->{NetworkDir}) {
    die "Configuration directive missing: NetworkDir\n"
  }
    
  for my $thisopt (keys %$cfg) {
    $cfg->{$thisopt} = $cfhash->{$thisopt};
  }
  
  if ($cfg->{LogFile}) {
    my $loglevel = $opts->{loglevel} || $cfg->{LogLevel} || 'info' ;
    my $handler = IRC::Indexer::Logger->new(
      LogFile  => $cfg->{LogFile},
      LogLevel => $loglevel,
    );
    $obj->{Log} = $handler->logger;
  }
  
  $cfg->{ServerPort} //= 8700;
  
  my $nethash = $conf->parse_nets($cfhash->{NetworkDir});
  $cfg->{Networks} = $nethash;
}

sub log_to {
  ## log_to('http', 'warn', ...)
  ## log_to('irc', 'info', ...)
  ## null-op if there's no logger present
  my ($type, $level, @lines) = @_;
  return unless @lines;
  my $log = $obj->{Log};
  return unless blessed $log;
  
  given (lc $type) {
  
    when ("http") {
      return unless $cfg->{LogHTTP};
      $log->$level("$type ", @lines);
    }
    
    when ("irc") {
      return unless $cfg->{LogIRC};
      $log->$level("$type ", @lines);
    }
    
    default {
      ## anything else goes right to the log:
      $log->$level("$type ", @lines);
    }
  
  }
}

sub poco_cfg_httpd {
  
  $state->{htevents} = [ map { 'h_'.$_ } qw/
     error_404
     src
     stats
     server 
     network
  / ];


  POEx::HTTP::Server->spawn(
    inet => {
      LocalPort => $cfg->{ServerPort},
    },
    
    handlers => [
      '^/stats'   => 'poe:indexerhttp/h_stats', 
      '^/network' => 'poe:indexerhttp/h_network',
      '^/src'     => 'poe:indexerhttp/h_src',

      '' => 'poe:indexerhttp/h_error_404',
    ],
  );
  
  log_to('http', 'info', 'HTTP configured');
  
  return 1
}

sub poco_init_session {
  ## create 'indexerhttp' session
  POE::Session->create(
    package_states => [
      main => [ qw/
        _start
        _stop
        _timer_chk
        _trawler_chk
      / ],
    ],
  );

  log_to('session', 'debug', 'Session initialized');
}

sub _timer_chk {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my $pool = $state->{timers};
  
  my @trawlers;

  NETWORK: for my $network (keys %{$pool->{trawlers}}) {
    my $this_net = $pool->{trawlers}->{$network};
    SERVER: for my $server (keys %$this_net) {
      my $this_server = $this_net->{$server};

      if (time - $this_server->{LastRun} > 600) {
        ## FIXME configurable interval
        ## 10 minutes passed, create a new trawler
        my $this_cf = $cfg->{Networks}->{$network}->{$server};
        my %trawlopts = %$this_cf;
        my $trawler = create_trawler(Server => $server, %trawlopts);
        $obj->{Trawlers}->{$network}->{$server} = $trawler;
        log_to('irc', 'debug', "Starting trawler for $server");
        ## FIXME: space out runs() for servers on the same network
        ##  or just have per-network trawlers and swap them out for diff
        ##  server
        $trawler->run;
        $this_server->{LastRun} = time;
      }

      my $this_trawler = $obj->{Trawlers}->{$network}->{$server};

      next SERVER unless blessed $this_trawler;

      log_to('irc', 'debug', "Checking trawler: $network: $server");

      push(@trawlers, [ $this_trawler, $network, $server ]);
    }
  }
  
  $kernel->yield('_trawler_chk', @trawlers)
    unless $heap->{TRAWLCHK_RUNNING};

  $kernel->alarm('_timer_chk' => time + 3);
}

sub _trawler_chk {
  ## event _trawler_chk(@trawler_objs ...)
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my (@remaining) = @_[ARG0 .. $#_];
  my $idx = 0;
  
  $heap->{TRAWLCHK_RUNNING} = 1;

  ## check trawlers in a loop, 10 at a time
  until (!@remaining || $idx == 10) {
    ++$idx;
    my $item = shift @remaining;
    my ($trawler, $network, $server) = @$item;
    if ($trawler->done) {
      log_to('irc', 'info', 
        "handling completed trawler: $network ($server)"
      );
      
      if (my $err = $trawler->failed) {
        log_to('irc', 'warn',
          "trawler reports failure: $network ($server): $err"
        );
        next
      }
      
      ## sort ListChans:
      $trawler->info->channels;
      
      ## feed to JSONify
      my $js = IRC::Indexer::Output::JSON->new(
        Input => $trawler->dump,
      );
      
      ## cache JSONified output
      $json->{Servers}->{$network}->{$server} = $js->dump;
      log_to('irc', 'debug',
        "Cached JSON: $network ($server)"
      );
      
      ## create an Info::Network if we don't have one
      $obj->{NetInfo}->{$network} = IRC::Indexer::Info::Network->new()
        unless blessed $obj->{NetInfo}->{$network};
      
      ## feed it this server's Info object:
      $obj->{NetInfo}->{$network}->add_server($trawler->info);
      
      ## cache or refresh JSON for that, too:
      my $ref = $obj->{NetInfo}->{$network}->dump;
      my $n_js = IRC::Indexer::Output::JSON->new(
        Input => $ref,
      );
      
      $json->{Networks}->{$network} = $n_js->dump;
      
      $obj->{Trawlers}->{$network}->{$server} = undef;
    }
    
  }
  
  if (@remaining) {
    $kernel->yield('_trawler_chk', @remaining);
  } else {
    delete $heap->{TRAWLCHK_RUNNING};
  }
}

sub create_trawler {
  my %trawlopts = @_;
  my $this_cf = \%trawlopts;
  my $trawler = IRC::Indexer::Trawl::Bot->new(
    Server => $this_cf->{Server},
    Port   => $this_cf->{Port},
    Nickname => $this_cf->{Nickname},
    Timeout  => $this_cf->{Timeout},
    Interval => $this_cf->{Interval},
    BindAddr => $this_cf->{BindAddr},
    UseIPV6  => $this_cf->{UseIPV6},
  );
  return $trawler
}

sub _start {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  $kernel->alias_set('indexerhttp');

  log_to('session', 'debug', 'Session started');

  ## init httpd
  my @htstates = poco_cfg_httpd();
  
  ## add states from $state->{htevents}
  $kernel->state($_, __PACKAGE__) for @{$state->{htevents}};
  
  my($total_nets, $total_servers);
  NETWORK: for my $network (keys %{ $cfg->{Networks} }) {
    ++$total_nets;
    my $this_net = $cfg->{Networks}->{$network};
    SERVER: for my $server (keys %$this_net) {
      ++$total_servers;
      my $this_cf = $this_net->{$server};
      
      log_to('irc', 'debug', "New trawler: $network -> $server");

      my %trawlopts = %$this_cf;
      my $trawler = create_trawler(Server => $server, %trawlopts);
      
      $obj->{Trawlers}->{$network}->{$server} = $trawler;
      
      log_to('irc', 'debug', "Starting trawler for $server");
      $trawler->run;

      ## add to chk pool      
      $state->{timers}->{trawlers}->{$network}->{$server} = {
        LastRun => 0,
      };
    }
  }
  
  $kernel->alarm('_timer_chk' => time + 3);

  log_to('irc', 'info',
    "Trawling $total_servers servers across $total_nets networks"
  );

  $state->{stats}->{TotalNetworks} = $total_nets;
  $state->{stats}->{TotalServers}  = $total_servers;
}

sub _stop {}

## HTTP states

sub h_error_404 {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];
  
  my $uri  = URI->new( $req->uri );
  my $path = $uri->path;
  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  
  log_to('http', 'info', "$addr 404 $path");
  
  $resp->error(404, "Undefined action: ".$req->uri);
}

sub h_src {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];
  
  unless ($opts->{showsource}) {
    $kernel->yield( h_error_404 => $req, $resp );
    return
  }

  my $src;
  seek(DATA, 0, 0);
  {
    local $/; $src = <DATA>;
  }

  $resp->content_type('text/plain');
  $resp->content($src);
  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_src");
  
  $resp->done;
}

sub h_stats {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];

  my $uri = URI->new($req->uri);
  my @chunks = $uri->path_segments;
  splice @chunks, 0, 2;

  my ($method) = @chunks;
  $method = 'json' unless $method;
  
  my $n_count = $state->{stats}->{TotalNetworks};
  my $s_count = $state->{stats}->{TotalServers};
  
  if ($method eq 'text' || $method eq 'plain') {
    $resp->content_type('text/plain');
    $resp->content(
        "Trawling $s_count servers across $n_count networks\n\n"
      . "Version: $IRC::Indexer::VERSION\n\n"
    );
  } else {
    $resp->content_type('application/json');
    my $ref = {
      Networks => $n_count,
      Servers  => $s_count,
    };
    my $json = JSON::XS->new->utf8(1)->pretty->encode($ref);
    $resp->content($json);
  }

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_stats");
  
  $resp->done;
}

sub h_server {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp)       = @_[ARG0, ARG1];
  my ($network, $server) = @_[ARG2, ARG3];
  ## handed off by h_network

  ## don't autoviv on failed requests:
  unless (
    exists $json->{Servers}->{$network} 
    && defined $json->{Servers}->{$network}->{$server}
  ) {
    ## no JSON for this server, 404
    $kernel->yield( h_error_404 => $req, $resp );
    return
  }

  my $json = $json->{Servers}->{$network}->{$server};
  
  $resp->content_type('application/json');
  $resp->content($json);

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_server $network $server");
  
  $resp->done;
}

sub h_network {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  my ($req, $resp) = @_[ARG0, ARG1];
  ## handler for /network/...

  my $uri = URI->new($req->uri);
  my @chunks = $uri->path_segments;
  splice @chunks, 0, 2;

  ## if there's no network specified, 404
  my ($network) = @chunks;
  unless ($network) {
    ## FIXME supply JSONified network list?
    $kernel->yield( h_error_404 => $req, $resp );
    return
  }
    
  ## if this is a /network/<net>/server, hand it off
  if ($chunks[1] && $chunks[1] eq "server") {
    my $server = $chunks[2];
    unless ($server) {
      $kernel->yield( h_error_404 => $req, $resp );
      return
    }
    $kernel->yield( h_server => $req, $resp, $network, $server );
    return
  }

  ## otherwise, try to serve a net hash
  unless (defined $json->{Networks}->{$network}) {
    $kernel->yield( h_error_404 => $req, $resp );
    return
  }
  
  my $json = $json->{Networks}->{$network};
  
  $resp->content_type('application/json');
  $resp->content($json);

  $resp->respond;

  my $conn = $req->connection;
  my $addr = $conn->remote_host;
  log_to('http', 'info', "$addr 200 h_network $network");
  $resp->done;
}

get_cfg();
poco_init_session();
POE::Kernel->run;

__END__

=pod

=head1 NAME

ircindexer-server-json - Serve IRC::Indexer JSON over HTTP

=head1 SYNOPSIS

  ## Create example httpd.cf:
  $ ircindexer-examplecf -t httpd -o httpd.cf

  ## Add some servers:
  $ mkdir -p networks/cobaltirc
  $ ircindexer-examplecf -t spec -o \
      networks/cobaltirc/phoenix.xyloid.org

  ## Start server:
  $ ircindexer-server-json -c httpd.cf

=head1 DESCRIPTION

Indexes sets of servers in parallel via L<IRC::Indexer>, exporting 
information to JSON via HTTP for ease of retrieval.

=head2 Fetching JSON

=head3 Networks

Network information hashes are exported via B</network/> routes:

  ## JSON Network Info hash for 'CobaltIRC':
  http://my.server:8700/network/CobaltIRC

=head3 Servers

Specific server hashes as described in L<IRC::Indexer::Trawl::Bot> are 
exported via /network/<NETNAME>/server/<SERVERNAME>:

  http://my.server:8700/network/CobaltIRC/server/eris.oppresses.us

=cut
