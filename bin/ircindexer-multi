#!perl

use strict;
use warnings;

use File::Find;
use File::Path;

use YAML::XS;

use POE:

use IRC::Indexer::Trawl::Multi;

use IRC::Indexer::Output::JSON;
use IRC::Indexer::Output::YAML;

use Getopt::Long;
my $opts = {
  version => sub {
  
    exit 0
  },
  
  help => sub {
  
    exit 0
  },
};

GetOptions( $opts,
  qw/
    help
    version
    
    verbose:0
    
    config=s
    
    exampleconf=s
    
    
  /;
);

my $cfg = {};

sub read_cf {
  my ($path) = @_;
  my $cf = slurp($path) or die "empty configuration? conf: $path\n";
  ## FIXME
  ## set up and verify cfg
  ## try to create OutputDir if it doesn't exist
}

sub read_net_dir {
  ## FIXME find .network specs recursively
  ##  set up cfg hash for them
}

sub slurp {
  my ($path) = @_;
  my $slurped;
  open my $fh, '<', $path or die "open failed: $!\n";
  { local $/; $slurped = <$fh> }
  close $fh;
  return $slurped
}

sub _start {

  ## FIXME
  ## Spawn pool of trawlers
  ## Feed successful trawlers to Info::Network
  ## When everyone is done, call write-out
}

sub example_cf {
  ## write an example config
  my ($path) = @_;
  my $conf = <<END;
---
### Example ircindexer-multi config

## NetworkDir:
##
## Network spec files will be found recursively under NetworkDir:
## A network spec file should end in ".server"
## These specs tie networks together under their specified Network:
## The files should be YAML, looking something like:
#   ---
#   Network: CobaltIRC
#   Server: eris.oppresses.us
#   Port: 6667
#   Timeout: 90
#   Interval: 15
##
NetworkDir: /home/ircindex/networks

## Format:
##
## The output subclass to use. One of: JSON, YAML, Dumper
Format: YAML

## OutputType:
##
## One of: Network, Server, All
## Determines how flatfile output will be saved.
##
## If OutputType is 'Network', servers belonging to a particular 
## network name are consolidated into one file per network.
##
## If OutputType is 'Server', output is split into one file per 
## server.
##
## If OutputType is 'All', output is saved to one giant file 
## covering all networks trawled.
OutputType: Network

## OutputDir:
##
## Destination for output files; must be a directory.
OutputDir: /home/ircindex/trawled

END

  open my $fh, '>', $path or die "open failed: $!\n";
  print $fh $conf;
  close $fh;
}
